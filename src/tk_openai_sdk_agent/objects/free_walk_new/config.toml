



AI_MODEL = 'DEEPSEEK-V3'

SYSTEM_CONTENT = """
你是一个IP数据库专家，负责将用户提供的IP称呼与角色组合规范化为标准格式。
"""
VERIFY_SYSTEM_CONTENT = """
你是一个IP信息验证系统，负责根据四个AI代理的识别结果确定IP官方名称。
"""

PROMPT_TEMPLATE = """
请按以下规则处理输入数据：  

<输入格式说明>  
输入数据为多行文本，每行格式为：  
"IP称呼-角色名称"  
示例输入：  
孙悟空-齐天大圣  
灭霸-萨诺斯  
</输入格式说明>  

<处理规则>  
1. **官方名称优先**：若IP存在官方注册名称(如版权方公布名称)，必须使用该名称  
2. **民间称呼判定**：若无官方名称，采用符合以下标准的民间称呼：  
   - 百度/谷歌搜索前3结果中出现频率最高  
   - 中文维基百科/萌娘百科等权威平台使用名称  
   - 相关贴吧/微博话题常用称呼  
3. **无效输入处理**：若出现以下情况，在"IP官方名称"字段填"未知"：  
   - 格式不符合"IP称呼-角色名称"结构  
   - IP称呼存在拼写错误无法识别  
   - 经查证无任何可信来源支持  
4. **中文优先**: 若IP存在中文官方名称,优先使用中文名称
5. **字母小写**：若IP官方名称存在英文,则英文全部小写
6. **系列作品判断**:  若IP名称为系列作品名称，名称使用XX系列-XXXX格式
</处理规则>  

<输出说明>  
输出为JSON数组，每个对象包含：  
{  
  "IP称呼": "原始输入IP称呼",  
  "角色名称": "原始输入角色名称",  
  "IP官方名称": "规范后的标准名称/未知"  
}  
</输出说明>  

<输出要求>  
生成包含所有有效条目的JSON数组，每个对象包含：  
{  
  "IP称呼": "原始输入IP称呼",  
  "角色名称": "原始输入角色名称",  
  "IP官方名称": "规范后的标准名称/未知"  
}  
</输出要求>  

<执行步骤>  
1. 逐行解析输入，按"-"分割为IP称呼和角色名称  
2. 对每个IP称呼执行以下操作：  
   a. 检查国家知识产权局商标数据库(模拟)  
   b. 查询版权方官网/官方公告(模拟)  
   c. 若未找到官方记录，检索主流平台的高频称呼  
3. 生成最终JSON时：  
   - 保留原始输入的大小写格式  
   - 空值字段用null表示  
   - 数组按输入顺序排列  
   - IP称呼和角色名称与原始输入保持完全一致 不需要进行任何调整

<示例>  
输入：  
皮卡丘-电气鼠  
黑暗骑士-小丑  

输出：  
[  
  {  
    "IP称呼": "皮卡丘",  
    "角色名称": "电气鼠",  
    "IP官方名称": "宝可梦"  
  },  
  {  
    "IP称呼": "黑暗骑士",  
    "角色名称": "小丑",  
    "IP官方名称": "蝙蝠侠"  
  }  
]  
</示例>  

现在开始处理以下输入数据：  
<输入数据>  
{{QUERY_DATA}}  
</输入数据>  

请确保：  
- 不添加解释性文字  
- 不使用Markdown格式  
- JSON严格符合语法规范  
- 数组元素顺序与输入顺序完全一致  
"""

VERIFY_PROMPT_TEMPLATE = """
请严格按照以下流程处理输入数据：

<输入格式说明>  
输入数据为多行文本，每行格式为：  
"IP称呼@角色名称@AI模型1认为的IP官方名称@AI模型2认为的IP官方名称@AI模型3认为的IP官方名称@AI模型4认为的IP官方名称"  
示例输入：  
惊封@菲比@我在惊悚游戏里封神@未知@我在惊悚游戏里封神@我在惊悚游戏里封神
萝莉神安魂曲@时雨羽衣@安魂曲@未知@未知@未知
</输入格式说明>  

验证规则：
1. 权威性验证：优先匹配与官方资料库完全一致的名称
2. 一致性验证：至少有三个AI返回相同结果时自动采用
3. 最新性验证：当结果冲突时采用最近更新的官方名称
4. 优先中文原则:如果存在中文和外文名称，优先使用中文名称
5. 最小原则:若名称存在意义接近,但长短不同时则选择最短的
6. 系列作品判断:  若IP名称为系列作品名称，名称使用XX系列-XXXX格式

处理流程：
1. 频率排序：统计剩余结果的重复次数
2. 交叉验证：使用官方IP数据库进行名称匹配
3. 最终裁决：
   - 有匹配的权威名称时采用
   - 无匹配但存在高频结果(≥2次)时采用
   - 其他情况返回"未知"

请在<analysis>标签中执行以下操作：
1. 列出所有非"未知"的有效候选
2. 标注每个候选的重复次数
3. 记录与官方资料的匹配情况

输出要求：
生成严格符合以下结构的JSON响应：
[
  {
    "IP称呼": "输入的IP名称1",
    "角色名称": "输入的角色名称1",
    "验证结果": "确定的正确名称 或 '未知'",
    "置信度": "高/中/低",
    "依据": ["依据1", "依据2"]
  },
  {
    "IP称呼": "输入的IP名称N",
    "角色名称": "输入的角色名称N",
    "验证结果": "确定的正确名称 或 '未知'",
    "置信度": "高/中/低",
    "依据": ["依据1", "依据2"]
  }
]

注意事项：
1. JSON值必须使用双引号
2. 置信度判定标准：
   - 高：权威匹配或4个相同结果
   - 中：3个相同结果
   - 低：2个相同结果
3. 如果所有AI都返回"未知"，置信度设为"无"
4. 依据字段应包含具体匹配的位置编号和/或官方来源


现在开始处理以下输入数据：  
<输入数据>  
{{QUERY_DATA}}
</输入数据>  

请确保：  
- 不添加解释性文字  
- 不使用Markdown格式  
- JSON严格符合语法规范  
- 数组元素顺序与输入顺序完全一致  
"""

SOURCE_DATA_FILE_PATH = '$/src/tk_openai_sdk_agent/data/成都世界线自由行数据.xlsx'
VERIFY_SOURCE_DATA_FILE_PATH = '$/src/tk_openai_sdk_agent/report/最新报告.xlsx'
SUCCESS_RSP_FILE_PATH = '$/src/tk_openai_sdk_agent/result/success/temp_rsp.txt'
FAIL_RSP_FILE_PATH = '$/src/tk_openai_sdk_agent/result/fail/fail_rsp.txt'
INSERT_ERROR_FILE_PATH = '$/src/tk_openai_sdk_agent/result/insert_error/insert_fail.txt'

SEMAPHORE_NUMBER = 100
BATCH_SIZE = 50 
STREAM = false
PRINT_CONSOLE = false

VERIFY_AI_MODEL = 'DEEPSEEK-V3'

AI_MODEL_LIST = [
    'DOUBAO-THINKING-PRO',
    'DEEPSEEK-R1',
    'DOUBAO-VISION-PRO',
    'DOUBAO-PRO-32K'
]

[AI_MODEL_MAPPING] 
    DOUBAO-THINKING-PRO = 'ep-20250427171722-5fb9c'
    DEEPSEEK-V3 = 'ep-20250427171507-l9cgg'
    DEEPSEEK-R1 = 'ep-20250427171252-8kdjr'
    DOUBAO-VISION-PRO = 'ep-20250427172000-zbqrb'
    DOUBAO-PRO-32K = 'ep-20250427172216-g9s4g'
